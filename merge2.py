#this file merges two sorted n-gram frequency files into one
#__________________IMPORTS_________________________________________________________
import re
import os
import io
import sys
import shutil

#__________________MAIN_________________________________________________________

print("\n\n")

#obtain files containing 6-gram frequencies across disjoint sets of malware byte files from commandd line arguments
fps = []
fps.append(open(sys.argv[1], "r"))
fps.append(open(sys.argv[2], "r"))


lines = [] #list of min 6-gram in each input file
for fp in fps: #obtain min 6-gram in each input file file
	lines.append(re.split(',|\n',fp.readline())[0:2]) #input files are already sorted frequencies by n-gram so 1st line contains min n-gram
gfreq = 0 # frequency of current n-gram across both input files
gfp = open(sys.argv[3], "w") #create output file to save n-grams and their combined frequencies across both input files
oldm = min(lines, key=lambda item: int(item[0], 16))[0] #minimum of the min 6-grams of each input file
buf = io.StringIO()
c = 1
while(1):
	m = min(lines, key=lambda item: int(item[0], 16)) #find min of input file mins
	if m[0] == '1000000000000': #if min of input file mins is out of bounds, break
		buf.write(oldm+","+str(gfreq)+"\n")
		buf.seek(0)
		shutil.copyfileobj(buf, gfp)
		print("4-gram progress:100.00%", end="\n", flush=True)
		break
	if m[0] == oldm: #if min of input file mins same as previous min of input file mins, then add current frequency to frequency of current n-gram across both input files
		gfreq+=int(m[1])
	else: #if min of mins is different then previous min of mins, then write the frequency of the current n-gram across both input files and the current n-gram to stringIO buffer obj
		buf.write(oldm+","+str(gfreq)+"\n")
		if int(oldm, 16) > int('1000000000', 16) * c: #if previous min of mins a multiple of 0x1000000000
			print("6-gram progress:"+str(100*((int('1000000000', 16) * c)/int('FFFFFFFF',16)))[:6]+"%", end="\n", flush=False) #print estimated completetion percentage
			c+=1 #increcriment c, so that if-condition is not triggered until next multilple of 0x1000000000
			buf.seek(0)
			shutil.copyfileobj(buf, gfp) #save buffer to output file containing merged frequencies
			buf.close()
			buf = io.StringIO() #create new buffer since dereferencing and creation is quicker then truncation
		gfreq=int(m[1]) #set frequency of current n-gram across both input files to current frequency
	i = lines.index(m) #obtain index of min of input file mins and grab the next minimum 6-gram from that input file 
	next = re.split(',|\n',fps[i].readline())[0:2] #obtain next min ngram from i-th file pointer 
	if len(next) == 2: #check if next line not EOF
		lines[i] = next #update list of min ngrams
	else:
		lines[i] = ['1000000000000', '0'] #if EOF, set min to out of bounds value (change to 1000000000000 for 6-grams)
	oldm = m[0]
		
gfp.close()
for fp in fps: #close all file pointers
	fp.close()
	
print("\nDONE 4-grams!!!\n\n")